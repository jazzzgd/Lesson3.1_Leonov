//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/PlatformControls 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlatformControls1 : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlatformControls1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlatformControls 1"",
    ""maps"": [
        {
            ""name"": ""ActionMap"",
            ""id"": ""f69879b9-2527-42f5-88f3-3a8357f7fd95"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""234a1247-9507-45a8-b38d-7b666e1ff31a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovePlatform1"",
                    ""type"": ""Value"",
                    ""id"": ""254a7bec-1e90-4c94-8325-bd3e1ed41688"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlatform2"",
                    ""type"": ""Value"",
                    ""id"": ""647e4b50-055f-4f0b-91ed-a4bb854bb200"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff3b6b69-cf63-49fb-9bfd-4b20d498a2c4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""387afc21-35c6-445a-9954-c641dae6515d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d79f43d6-f1dc-4adf-aa18-a2b015726da4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9af2d089-5bea-4551-bb11-8d8c714cf61c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""48a5aac4-1e75-4119-aaee-926bcda7fa3d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40d51911-f69c-4f84-bf17-7c5240827d32"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""506de892-372d-45af-bc09-3b7f44abf5cc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ea6026d7-e124-431a-85e9-968a2ce65f15"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""62ff0698-e266-4f9d-a221-e4048a92cf6a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""76a3987f-139a-4b79-9a27-2d04bc7c0734"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7fe838fc-3315-41fe-a7c1-0f38f6bef664"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlatform2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMap
        m_ActionMap = asset.FindActionMap("ActionMap", throwIfNotFound: true);
        m_ActionMap_Start = m_ActionMap.FindAction("Start", throwIfNotFound: true);
        m_ActionMap_MovePlatform1 = m_ActionMap.FindAction("MovePlatform1", throwIfNotFound: true);
        m_ActionMap_MovePlatform2 = m_ActionMap.FindAction("MovePlatform2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap
    private readonly InputActionMap m_ActionMap;
    private IActionMapActions m_ActionMapActionsCallbackInterface;
    private readonly InputAction m_ActionMap_Start;
    private readonly InputAction m_ActionMap_MovePlatform1;
    private readonly InputAction m_ActionMap_MovePlatform2;
    public struct ActionMapActions
    {
        private @PlatformControls1 m_Wrapper;
        public ActionMapActions(@PlatformControls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_ActionMap_Start;
        public InputAction @MovePlatform1 => m_Wrapper.m_ActionMap_MovePlatform1;
        public InputAction @MovePlatform2 => m_Wrapper.m_ActionMap_MovePlatform2;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IActionMapActions instance)
        {
            if (m_Wrapper.m_ActionMapActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnStart;
                @MovePlatform1.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnMovePlatform1;
                @MovePlatform1.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnMovePlatform1;
                @MovePlatform1.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnMovePlatform1;
                @MovePlatform2.started -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnMovePlatform2;
                @MovePlatform2.performed -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnMovePlatform2;
                @MovePlatform2.canceled -= m_Wrapper.m_ActionMapActionsCallbackInterface.OnMovePlatform2;
            }
            m_Wrapper.m_ActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @MovePlatform1.started += instance.OnMovePlatform1;
                @MovePlatform1.performed += instance.OnMovePlatform1;
                @MovePlatform1.canceled += instance.OnMovePlatform1;
                @MovePlatform2.started += instance.OnMovePlatform2;
                @MovePlatform2.performed += instance.OnMovePlatform2;
                @MovePlatform2.canceled += instance.OnMovePlatform2;
            }
        }
    }
    public ActionMapActions @ActionMap => new ActionMapActions(this);
    public interface IActionMapActions
    {
        void OnStart(InputAction.CallbackContext context);
        void OnMovePlatform1(InputAction.CallbackContext context);
        void OnMovePlatform2(InputAction.CallbackContext context);
    }
}
